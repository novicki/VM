//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VendingAutomat.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VendingMachineEntities : DbContext
    {
        public VendingMachineEntities()
            : base("name=VendingMachineEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cash> Cash { get; set; }
        public virtual DbSet<CashOwner> CashOwner { get; set; }
        public virtual DbSet<CashType> CashType { get; set; }
        public virtual DbSet<ProductRange> ProductRange { get; set; }
        public virtual DbSet<ProductSales> ProductSales { get; set; }
        public virtual DbSet<UserBalance> UserBalance { get; set; }
    
        public virtual int BuyProduct(Nullable<int> cashOwner, Nullable<int> productId)
        {
            var cashOwnerParameter = cashOwner.HasValue ?
                new ObjectParameter("cashOwner", cashOwner) :
                new ObjectParameter("cashOwner", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BuyProduct", cashOwnerParameter, productIdParameter);
        }
    
        public virtual int ChangeCashAmount(Nullable<int> cashOwner, Nullable<int> cashRecipient, Nullable<int> cashType)
        {
            var cashOwnerParameter = cashOwner.HasValue ?
                new ObjectParameter("CashOwner", cashOwner) :
                new ObjectParameter("CashOwner", typeof(int));
    
            var cashRecipientParameter = cashRecipient.HasValue ?
                new ObjectParameter("CashRecipient", cashRecipient) :
                new ObjectParameter("CashRecipient", typeof(int));
    
            var cashTypeParameter = cashType.HasValue ?
                new ObjectParameter("CashType", cashType) :
                new ObjectParameter("CashType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeCashAmount", cashOwnerParameter, cashRecipientParameter, cashTypeParameter);
        }
    
        public virtual int DecreaseBalance(Nullable<int> cashRecipient, Nullable<int> valueSubtraction)
        {
            var cashRecipientParameter = cashRecipient.HasValue ?
                new ObjectParameter("CashRecipient", cashRecipient) :
                new ObjectParameter("CashRecipient", typeof(int));
    
            var valueSubtractionParameter = valueSubtraction.HasValue ?
                new ObjectParameter("ValueSubtraction", valueSubtraction) :
                new ObjectParameter("ValueSubtraction", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DecreaseBalance", cashRecipientParameter, valueSubtractionParameter);
        }
    
        public virtual int GetChange(Nullable<int> cashOwner, Nullable<int> cashRecipient)
        {
            var cashOwnerParameter = cashOwner.HasValue ?
                new ObjectParameter("CashOwner", cashOwner) :
                new ObjectParameter("CashOwner", typeof(int));
    
            var cashRecipientParameter = cashRecipient.HasValue ?
                new ObjectParameter("CashRecipient", cashRecipient) :
                new ObjectParameter("CashRecipient", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetChange", cashOwnerParameter, cashRecipientParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetSumCashOwner(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetSumCashOwner", idParameter);
        }
    
        public virtual ObjectResult<GetWallet_Result> GetWallet(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWallet_Result>("GetWallet", idParameter);
        }
    
        public virtual int IncreaseBalance(Nullable<int> cashOwner, Nullable<int> cashType)
        {
            var cashOwnerParameter = cashOwner.HasValue ?
                new ObjectParameter("CashOwner", cashOwner) :
                new ObjectParameter("CashOwner", typeof(int));
    
            var cashTypeParameter = cashType.HasValue ?
                new ObjectParameter("CashType", cashType) :
                new ObjectParameter("CashType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IncreaseBalance", cashOwnerParameter, cashTypeParameter);
        }
    
        public virtual int NewUserBasket()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewUserBasket");
        }
    
        public virtual ObjectResult<ProductLatestSales_Result> ProductLatestSales()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductLatestSales_Result>("ProductLatestSales");
        }
    
        public virtual ObjectResult<SelectDefaultUserWallet_Result> SelectDefaultUserWallet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectDefaultUserWallet_Result>("SelectDefaultUserWallet");
        }
    
        public virtual ObjectResult<SelectDefaultVendingMachineWallet_Result> SelectDefaultVendingMachineWallet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectDefaultVendingMachineWallet_Result>("SelectDefaultVendingMachineWallet");
        }
    }
}
